;LABEL add 
;LINK
;ADDF $P1 $P2 $T1
;STOREF $T1 $L1
;STOREF $L1 $R
;RET

;LABEL multiply 
;LINK
;MULTF $P1 $P2 $T1
;STOREF $T1 $L1
;STOREF $L1 $R
;RET

;LABEL main 
;LINK
;WRITES intro 
;WRITES first 
;READF $L1 
;WRITES second 
;READF $L2 
;WRITES third 
;READF $L3 
;PUSH
;PUSH $L1 
;PUSH $L2 
;PUSH $L3 
;JSR multiply 
;POP
;POP
;POP
;POP $T1 
;STOREF none $L4
;WRITEF $L1 
;WRITES star 
;WRITEF $L2 
;WRITES plus 
;WRITEF $L3 
;WRITES equal 
;WRITEF $L4 
;WRITES eol 
;STOREI 0 $T2
;STOREI $T2 $R
;RET

;tiny code
str intro "You will be asked for three float numbers\n" 
str first "Please enter the first float number: " 
str second "Please enter the second float number: " 
str third "Please enter the third float number: " 
str eol "\n" 
str star "*" 
str plus "+" 
str equal "=" 
push 
push r0 
push r1 
push r2 
push r3 
jsr main 
sys halt 
label add 
;null    null    null    null
link 2 
;null    null    null    null
move $7 r3 
move $6 r2 
;free $P1 
addr r2 r3 
;$T1 :dirty    $P2    null    null
;free $P2 
move r3 r2 
;$T1 :dirty    $L1 :dirty    null    null
;free $T1 
move r2 $8 
;null    $L1 :dirty    null    null
;free $L1 
unlnk 
ret 
;null    null    null    null
label multiply 
;null    null    null    null
link 2 
;null    null    null    null
move $7 r3 
move $6 r2 
;free $P1 
mulr r2 r3 
;$T1 :dirty    $P2    null    null
;free $P2 
move r3 r2 
;$T1 :dirty    $L1 :dirty    null    null
;free $T1 
move r2 $8 
;null    $L1 :dirty    null    null
;free $L1 
unlnk 
ret 
;null    null    null    null
label main 
;null    null    null    null
link 6 
;null    null    null    null
sys writes intro 
;null    null    null    null
sys writes first 
;null    null    null    null
sys readr r3 
;$L1 :dirty    null    null    null
sys writes second 
;$L1 :dirty    null    null    null
sys readr r2 
;$L1 :dirty    $L2 :dirty    null    null
sys writes third 
;$L1 :dirty    $L2 :dirty    null    null
sys readr r1 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
push 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
push r3 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
push r2 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
push r1 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
push r0 
push r1 
push r2 
push r3 
jsr multiply 
pop r3 
pop r2 
pop r1 
pop r0 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
pop 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
pop 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
pop 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    null
pop r0 
;$L1 :dirty    $L2 :dirty    $L3 :dirty    $T1
;free $T1 
move $6 r0 
;free $L1 
move r3 $-1 
move r0 r3 
;$L4 :dirty    $L2 :dirty    $L3 :dirty    none :dirty
;free none 
move $-1 r0 
sys writer r0 
;$L4 :dirty    $L2 :dirty    $L3 :dirty    $L1
;free $L1 
sys writes star 
;$L4 :dirty    $L2 :dirty    $L3 :dirty    null
sys writer r2 
;$L4 :dirty    $L2 :dirty    $L3 :dirty    null
;free $L2 
sys writes plus 
;$L4 :dirty    null    $L3 :dirty    null
sys writer r1 
;$L4 :dirty    null    $L3 :dirty    null
;free $L3 
sys writes equal 
;$L4 :dirty    null    null    null
sys writer r3 
;$L4 :dirty    null    null    null
;free $L4 
sys writes eol 
;null    null    null    null
move 0 r3 
;$T2 :dirty    null    null    null
move r3 $6 
;$T2 :dirty    null    null    null
;free $T2 
unlnk 
ret 
;null    null    null    null
;end of BLOCK 
end
