;LABEL add
;LINK
;ADDF $P1 $P2 $T1
;STOREF $T1 $L1
;STOREF $L1 $R
;RET

;LABEL multiply
;LINK
;MULTF $P1 $P2 $T1
;STOREF $T1 $L1
;STOREF $L1 $R
;RET

;LABEL main
;LINK
;WRITES intro
;WRITES first
;READF $L1
;WRITES second
;READF $L2
;WRITES third
;READF $L3
;PUSH
;PUSH $L1
;PUSH $L2
;JSR multiply
;POP
;POP
;POP $T1
;STOREF $T1 $L5
;PUSH
;PUSH $L5
;PUSH $L3
;JSR add
;POP
;POP
;POP $T2
;STOREF $T2 $L4
;WRITEF $L1
;WRITES star
;WRITEF $L2
;WRITES plus
;WRITEF $L3
;WRITES equal
;WRITEF $L4
;WRITES eol
;STOREI 0 $T3
;STOREI $T3 $R
;RET

;tiny code
str intro "You will be asked for three float numbers\n" 
str first "Please enter the first float number: " 
str second "Please enter the second float number: " 
str third "Please enter the third float number: " 
str eol "\n" 
str star "*" 
str plus "+" 
str equal "=" 
push 
push r0 
push r1 
push r2 
push r3 
jsr main 
sys halt 
;LABEL add 
label add 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;LINK 
link 3 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;ADDF $P1 $P2 $T1 
move $7 r3 
move $6 r2 
;free $P1 
addr r2 r3 
;r0: null    ;r1: null    ;r2: $P2    ;r3: $T1 :dirty
;free $P2 
;STOREF $T1 $L1 
move r3 r2 
;r0: null    ;r1: null    ;r2: $L1 :dirty    ;r3: $T1 :dirty
;free $T1 
;STOREF $L1 $R 
move r2 $8 
;r0: null    ;r1: null    ;r2: $L1 :dirty    ;r3: null
;free $L1 
;RET 
unlnk 
ret 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;LABEL multiply 
label multiply 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;LINK 
link 3 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;MULTF $P1 $P2 $T1 
move $7 r3 
move $6 r2 
;free $P1 
mulr r2 r3 
;r0: null    ;r1: null    ;r2: $P2    ;r3: $T1 :dirty
;free $P2 
;STOREF $T1 $L1 
move r3 r2 
;r0: null    ;r1: null    ;r2: $L1 :dirty    ;r3: $T1 :dirty
;free $T1 
;STOREF $L1 $R 
move r2 $8 
;r0: null    ;r1: null    ;r2: $L1 :dirty    ;r3: null
;free $L1 
;RET 
unlnk 
ret 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;LABEL main 
label main 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;LINK 
link 9 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;WRITES intro 
sys writes intro 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;WRITES first 
sys writes first 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;READF $L1 
sys readr r3 
;r0: null    ;r1: null    ;r2: null    ;r3: $L1 :dirty
;WRITES second 
sys writes second 
;r0: null    ;r1: null    ;r2: null    ;r3: $L1 :dirty
;READF $L2 
sys readr r2 
;r0: null    ;r1: null    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;WRITES third 
sys writes third 
;r0: null    ;r1: null    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;READF $L3 
sys readr r1 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;PUSH 
push 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;PUSH $L1 
push r3 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;PUSH $L2 
push r2 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;JSR multiply 
push r0 
push r1 
push r2 
push r3 
jsr multiply 
pop r3 
pop r2 
pop r1 
pop r0 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;POP 
pop 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;POP 
pop 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;POP $T1 
pop r0 
;r0: $T1 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1 :dirty
;STOREF $T1 $L5 
;free $L1 
move r3 $-1 
move r0 r3 
;r0: $T1 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L5 :dirty
;free $T1 
;PUSH 
push 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L5 :dirty
;PUSH $L5 
push r3 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L5 :dirty
;free $L5 
;PUSH $L3 
push r1 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;JSR add 
push r0 
push r1 
push r2 
push r3 
jsr add 
pop r3 
pop r2 
pop r1 
pop r0 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;POP 
pop 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;POP 
pop 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;POP $T2 
pop r3 
;r0: null    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $T2 :dirty
;STOREF $T2 $L4 
move r3 r0 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $T2 :dirty
;free $T2 
;WRITEF $L1 
move $-1 r3 
sys writer r3 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: $L1
;free $L1 
;WRITES star 
sys writes star 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;WRITEF $L2 
sys writer r2 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: $L2 :dirty    ;r3: null
;free $L2 
;WRITES plus 
sys writes plus 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: null    ;r3: null
;WRITEF $L3 
sys writer r1 
;r0: $L4 :dirty    ;r1: $L3 :dirty    ;r2: null    ;r3: null
;free $L3 
;WRITES equal 
sys writes equal 
;r0: $L4 :dirty    ;r1: null    ;r2: null    ;r3: null
;WRITEF $L4 
sys writer r0 
;r0: $L4 :dirty    ;r1: null    ;r2: null    ;r3: null
;free $L4 
;WRITES eol 
sys writes eol 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;STOREI 0 $T3 
move 0 r3 
;r0: null    ;r1: null    ;r2: null    ;r3: $T3 :dirty
;STOREI $T3 $R 
move r3 $6 
;r0: null    ;r1: null    ;r2: null    ;r3: $T3 :dirty
;free $T3 
;RET 
unlnk 
ret 
;r0: null    ;r1: null    ;r2: null    ;r3: null
;end of BLOCK 
end
