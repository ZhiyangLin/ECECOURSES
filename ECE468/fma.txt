;IR code
;LABEL add 
successors:
;LINK
predecessors:

;LINK
successors:
;ADDF $P1 $P2 $T1
predecessors:
;LABEL add 

;ADDF $P1 $P2 $T1
successors:
;STOREF $T1 $L1
predecessors:
;LINK

;STOREF $T1 $L1
successors:
;STOREF $L1 $R
predecessors:
;ADDF $P1 $P2 $T1

;STOREF $L1 $R
successors:
;RET

predecessors:
;STOREF $T1 $L1

;RET

successors:
predecessors:
;STOREF $L1 $R

;LABEL multiply 
successors:
;LINK
predecessors:

;LINK
successors:
;MULTF $P1 $P2 $T1
predecessors:
;LABEL multiply 

;MULTF $P1 $P2 $T1
successors:
;STOREF $T1 $L1
predecessors:
;LINK

;STOREF $T1 $L1
successors:
;STOREF $L1 $R
predecessors:
;MULTF $P1 $P2 $T1

;STOREF $L1 $R
successors:
;RET

predecessors:
;STOREF $T1 $L1

;RET

successors:
predecessors:
;STOREF $L1 $R

;LABEL main 
successors:
;LINK
predecessors:

;LINK
successors:
;WRITES intro 
predecessors:
;LABEL main 

;WRITES intro 
successors:
;WRITES first 
predecessors:
;LINK

;WRITES first 
successors:
;READF $L1 
predecessors:
;WRITES intro 

;READF $L1 
successors:
;WRITES second 
predecessors:
;WRITES first 

;WRITES second 
successors:
;READF $L2 
predecessors:
;READF $L1 

;READF $L2 
successors:
;WRITES third 
predecessors:
;WRITES second 

;WRITES third 
successors:
;READF $L3 
predecessors:
;READF $L2 

;READF $L3 
successors:
;PUSH
predecessors:
;WRITES third 

;PUSH
successors:
;PUSH $L1 
predecessors:
;READF $L3 

;PUSH $L1 
successors:
;PUSH $L2 
predecessors:
;PUSH

;PUSH $L2 
successors:
;JSR multiply 
predecessors:
;PUSH $L1 

;JSR multiply 
successors:
;POP
predecessors:
;PUSH $L2 

;POP
successors:
;POP
predecessors:
;JSR multiply 

;POP
successors:
;POP $T1 
predecessors:
;POP

;POP $T1 
successors:
;STOREF $T1 $L5
predecessors:
;POP

;STOREF $T1 $L5
successors:
;PUSH
predecessors:
;POP $T1 

;PUSH
successors:
;PUSH $L5 
predecessors:
;STOREF $T1 $L5

;PUSH $L5 
successors:
;PUSH $L3 
predecessors:
;PUSH

;PUSH $L3 
successors:
;JSR add 
predecessors:
;PUSH $L5 

;JSR add 
successors:
;POP
predecessors:
;PUSH $L3 

;POP
successors:
;POP
predecessors:
;JSR add 

;POP
successors:
;POP $T2 
predecessors:
;POP

;POP $T2 
successors:
;STOREF $T2 $L4
predecessors:
;POP

;STOREF $T2 $L4
successors:
;WRITEF $L1 
predecessors:
;POP $T2 

;WRITEF $L1 
successors:
;WRITES star 
predecessors:
;STOREF $T2 $L4

;WRITES star 
successors:
;WRITEF $L2 
predecessors:
;WRITEF $L1 

;WRITEF $L2 
successors:
;WRITES plus 
predecessors:
;WRITES star 

;WRITES plus 
successors:
;WRITEF $L3 
predecessors:
;WRITEF $L2 

;WRITEF $L3 
successors:
;WRITES equal 
predecessors:
;WRITES plus 

;WRITES equal 
successors:
;WRITEF $L4 
predecessors:
;WRITEF $L3 

;WRITEF $L4 
successors:
;WRITES eol 
predecessors:
;WRITES equal 

;WRITES eol 
successors:
;STOREI 0 $T3
predecessors:
;WRITEF $L4 

;STOREI 0 $T3
successors:
;STOREI $T3 $R
predecessors:
;WRITES eol 

;STOREI $T3 $R
successors:
;RET

predecessors:
;STOREI 0 $T3

;RET

successors:
predecessors:
;STOREI $T3 $R

;tiny code
str intro "You will be asked for three float numbers\n" 
str first "Please enter the first float number: " 
str second "Please enter the second float number: " 
str third "Please enter the third float number: " 
str eol "\n" 
str star "*" 
str plus "+" 
str equal "=" 
push 
push r0 
push r1 
push r2 
push r3 
jsr main 
sys halt 
label add 
link 1 
move $7 r0 
addr $6 r0 
move r0 $-1 
move $-1 r1 
move r1 $8 
unlnk 
ret 
label multiply 
link 1 
move $7 r2 
mulr $6 r2 
move r2 $-1 
move $-1 r3 
move r3 $8 
unlnk 
ret 
label main 
link 5 
sys writes intro 
sys writes first 
sys readr $-1 
sys writes second 
sys readr $-2 
sys writes third 
sys readr $-3 
push 
push $-1 
push $-2 
push r0 
push r1 
push r2 
push r3 
jsr multiply 
pop r3 
pop r2 
pop r1 
pop r0 
pop 
pop 
pop r4 
move r4 $-5 
push 
push $-5 
push $-3 
push r0 
push r1 
push r2 
push r3 
jsr add 
pop r3 
pop r2 
pop r1 
pop r0 
pop 
pop 
pop r5 
move r5 $-4 
sys writer $-1 
sys writes star 
sys writer $-2 
sys writes plus 
sys writer $-3 
sys writes equal 
sys writer $-4 
sys writes eol 
move 0 r6 
move r6 $6 
unlnk 
ret 
end
